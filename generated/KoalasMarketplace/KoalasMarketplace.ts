// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketItemListed extends ethereum.Event {
  get params(): MarketItemListed__Params {
    return new MarketItemListed__Params(this);
  }
}

export class MarketItemListed__Params {
  _event: MarketItemListed;

  constructor(event: MarketItemListed) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isListed(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class MarketListingRemoved extends ethereum.Event {
  get params(): MarketListingRemoved__Params {
    return new MarketListingRemoved__Params(this);
  }
}

export class MarketListingRemoved__Params {
  _event: MarketListingRemoved;

  constructor(event: MarketListingRemoved) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketSaleCreated extends ethereum.Event {
  get params(): MarketSaleCreated__Params {
    return new MarketSaleCreated__Params(this);
  }
}

export class MarketSaleCreated__Params {
  _event: MarketSaleCreated;

  constructor(event: MarketSaleCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isListed(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class KoalasMarketplace extends ethereum.SmartContract {
  static bind(address: Address): KoalasMarketplace {
    return new KoalasMarketplace("KoalasMarketplace", address);
  }

  getFloorTokenId(): BigInt {
    let result = super.call(
      "getFloorTokenId",
      "getFloorTokenId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFloorTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFloorTokenId",
      "getFloorTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListedNFTsByUser(user: Address): Array<BigInt> {
    let result = super.call(
      "getListedNFTsByUser",
      "getListedNFTsByUser(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_getListedNFTsByUser(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getListedNFTsByUser",
      "getListedNFTsByUser(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getListedTokenIds(): Array<BigInt> {
    let result = super.call(
      "getListedTokenIds",
      "getListedTokenIds():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getListedTokenIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getListedTokenIds",
      "getListedTokenIds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPrice(tokenId: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSeller(tokenId: BigInt): Address {
    let result = super.call("getSeller", "getSeller(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getSeller(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getSeller", "getSeller(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isListed(tokenId: BigInt): boolean {
    let result = super.call("isListed", "isListed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isListed(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isListed", "isListed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  itemCount(): BigInt {
    let result = super.call("itemCount", "itemCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_itemCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("itemCount", "itemCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  itemsListed(): BigInt {
    let result = super.call("itemsListed", "itemsListed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_itemsListed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("itemsListed", "itemsListed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketplaceFees(): BigInt {
    let result = super.call(
      "marketplaceFees",
      "marketplaceFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marketplaceFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketplaceFees",
      "marketplaceFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  volume(): BigInt {
    let result = super.call("volume", "volume():(uint256)", []);

    return result[0].toBigInt();
  }

  try_volume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("volume", "volume():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateMarketSaleCall extends ethereum.Call {
  get inputs(): CreateMarketSaleCall__Inputs {
    return new CreateMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateMarketSaleCall__Outputs {
    return new CreateMarketSaleCall__Outputs(this);
  }
}

export class CreateMarketSaleCall__Inputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateMarketSaleCall__Outputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }
}

export class ListMarketItemCall extends ethereum.Call {
  get inputs(): ListMarketItemCall__Inputs {
    return new ListMarketItemCall__Inputs(this);
  }

  get outputs(): ListMarketItemCall__Outputs {
    return new ListMarketItemCall__Outputs(this);
  }
}

export class ListMarketItemCall__Inputs {
  _call: ListMarketItemCall;

  constructor(call: ListMarketItemCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ListMarketItemCall__Outputs {
  _call: ListMarketItemCall;

  constructor(call: ListMarketItemCall) {
    this._call = call;
  }
}

export class RemoveListingCall extends ethereum.Call {
  get inputs(): RemoveListingCall__Inputs {
    return new RemoveListingCall__Inputs(this);
  }

  get outputs(): RemoveListingCall__Outputs {
    return new RemoveListingCall__Outputs(this);
  }
}

export class RemoveListingCall__Inputs {
  _call: RemoveListingCall;

  constructor(call: RemoveListingCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveListingCall__Outputs {
  _call: RemoveListingCall;

  constructor(call: RemoveListingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePriceCall extends ethereum.Call {
  get inputs(): UpdatePriceCall__Inputs {
    return new UpdatePriceCall__Inputs(this);
  }

  get outputs(): UpdatePriceCall__Outputs {
    return new UpdatePriceCall__Outputs(this);
  }
}

export class UpdatePriceCall__Inputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdatePriceCall__Outputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
